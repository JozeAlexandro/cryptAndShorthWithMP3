/** ****************************************************************************
 * \brief Класс для работы с данными заголовков ID3v2
 *
 * Проверяется ID3V1 тэг. Первые 3 байта = "<<<" - значит, сообщение в файле
 * присутствует. затем, с 4-го байта и до знака '<' размер записанного
 * сообщения.
 *
 * Сообщение записывается в TALB фрейм сразу после encodingByte
 *
 * \file ID3v2TagWorker.h
 * ****************************************************************************/

#ifndef ID3V2TAGWORKER_H
#define ID3V2TAGWORKER_H

#include <fstream>
#include <filesystem>

/// Структура заголовка ID3v1 тэга
;
#pragma pack(push, 1)
struct ID3v1Header
{
    char     tag[3];
    char     name[30];
    char     singer[30];
    char     album[30];
    uint32_t year;
    char     comment[28];
    uint8_t  zeroByte;
    uint8_t  trackNumber;
    uint8_t  kind;
};
#pragma pack(pop)

/// Структура заголовка ID3v2 тэга
#pragma pack(push, 1)
struct ID3v2Header
{
    char     tag[3];
    char     version[2];
    uint8_t  flags;
    uint32_t size;
};
#pragma pack(pop)

/// Структура заголовка фреймов
#pragma pack(push, 1)
struct frameHeader
{
    char     id[4];
    uint32_t size;
    char     flags[2];
};
#pragma pack(pop)

/// Получить размер сообщения из ID2v2 заголовка
int32_t id3v2_get_size(const uint8_t *p);

/// Сконвертировать 4-байтноое число в тоже число, но при резервированных 7-х
/// битах в каждом байте
uint32_t convert32BitSizeTo28BitSize(const uint8_t *size32);

class ID3v2TagWorker
{
public:
    /** ************************************************************************
     * \brief Конструктор класса
     *
     * \param [in] filename путь до файла
     * ************************************************************************/
    ID3v2TagWorker(std::string filename);

    /** ************************************************************************
     * \brief Прочитать сообщение
     *
     * \return Сообщение
     * ************************************************************************/
    std::string readMessage() const;

    /** ************************************************************************
     * \brief Записать сообщение
     * ************************************************************************/
    void writeMessage(const std::string message);

private:
    /** ************************************************************************
     * \brief Путь до файла
     * ************************************************************************/
    std::string filename;

    /** ************************************************************************
     * \brief Размер заголовка ID3v1 тэга
     * ************************************************************************/
    const int32_t ID3v1_HEADER_SIZE = 128;

    /** ************************************************************************
     * \brief Размер заголовка ID3v2 тэга
     * ************************************************************************/
    const uint32_t ID3v2_HEADER_SIZE = 10;

    /** ************************************************************************
     * \brief Размер заголовка фреймов
     * ************************************************************************/
    const uint32_t FRAME_HEADER_SIZE = 10;

    /** ************************************************************************
     * \brief Для проверки на наличие сообщения
     * ************************************************************************/
    const std::string S_CHECK_SEQ = "<<<";

    /** ************************************************************************
     * \brief Для обозначения конца размера
     * ************************************************************************/
    const char STOP_SIGN = '<';

    /** ************************************************************************
     * \brief Проверить на наличие сообщения
     *
     * \return true, если сообщение присутствует
     * ************************************************************************/
    bool isFileHasMessage() const;

    /** ************************************************************************
     * \brief Получить размер сообщения
     *
     * \return Размер сообщения
     * ************************************************************************/
    size_t getMessageSize() const;

};
#endif // ID3V2TAGWORKER_H
